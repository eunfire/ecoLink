<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.BoardDAO">

    <!-- 모든 게시물 조회 -->
    <select id="getAllBoardList" resultType="dto.BoardDTO">
        SELECT * FROM board
    </select>

    <!-- 'share' 게시물만 조회 -->
    <select id="getShareBoardList" resultType="dto.BoardDTO">
        SELECT * FROM board WHERE boardType = 'share'
    </select>

    <!-- 최근 게시물 조회 -->
    <select id="recentBoardList" resultType="BoardDTO" parameterType="int">
        SELECT * FROM board WHERE boardType = 'share' ORDER BY boardRegtime DESC LIMIT #{num}
    </select>

    <!-- 조회수 기준으로 게시물 조회 -->
    <select id="viCntBoardList" resultType="BoardDTO" parameterType="int">
        SELECT * FROM board WHERE boardType = 'share' ORDER BY boardViewCount DESC, boardRegtime DESC LIMIT #{num}
    </select>

    <!-- 게시물 검색 -->
    <select id="searchBoard" parameterType="hashmap" resultType="dto.BoardDTO">
        SELECT * FROM board
        <where>
            <if test="colname != null">
                ${colname} LIKE #{colvalue}
            </if>
            <if test="colname == null">
                (boardTitle LIKE #{colvalue} OR boardContents LIKE #{colvalue})
            </if>
            AND boardType = 'share'
        </where>
        ORDER BY boardRegtime DESC
        LIMIT #{limitindex}, #{limitcount}
    </select>

    <!-- 검색된 게시물의 수 조회 -->
    <select id="searchBoardView" parameterType="hashmap" resultType="int">
        SELECT COUNT(*) FROM board
        <where>
            <if test="colname != null">
                ${colname} LIKE #{colvalue}
            </if>
            <if test="colname == null">
                (boardTitle LIKE #{colvalue} OR boardContents LIKE #{colvalue})
            </if>
            AND boardType = 'share'
        </where>
    </select>

    <!-- 게시물 등록 -->
    <insert id="createBoard" parameterType="BoardDTO">
        INSERT INTO board (boardTitle, boardContents, boardViewCount, boardRegtime, memId, boardType)
        VALUES (#{boardTitle}, #{boardContents}, 0, now(), #{memId}, 'share')
    </insert>

    <!-- 조회수 업데이트 -->
    <update id="addViewcount" parameterType="int">
        UPDATE board SET boardViewCount = boardViewCount + 1 WHERE boardId = #{boardId}
    </update>

    <!-- 게시물 상세 정보 조회 -->
    <select id="getBoardById" resultType="dto.BoardDTO" parameterType="int">
        SELECT * FROM board WHERE boardId=#{boardId}
    </select>

    <!-- 첨부파일 정보 등록 -->
    <insert id="insertimage" parameterType="filedto">
        INSERT INTO file (fileIdx, filePath, fileName, fileType, boardId)
        VALUES (#{fileIdx}, #{filePath}, #{fileName}, #{fileType}, #{boardId})
    </insert>

    <!-- 새로 생성된 게시물의 ID 조회 -->
    <select id="getCreateBoardId" resultType="int">
        SELECT last_insert_id()
    </select>

    <!-- 게시물에 첨부된 파일 조회 -->
    <select id="getImageByBoardId" parameterType="int" resultType="dto.FileDTO">
        SELECT * FROM file WHERE boardId = #{boardId}
    </select>

    <!-- 게시물 댓글 등록 -->
    <insert id="createBoardCom" parameterType="boardCommentDto" useGeneratedKeys="true" keyProperty="bcId">
        INSERT INTO board_comment (boardId, bcContents, memId, bcRef, bcReLevel)
        VALUES (#{boardId}, #{bcContents}, #{memId}, 0, 0)
    </insert>

    <!-- 댓글의 bcRef 값 업데이트 -->
    <update id="updateComBcRef" parameterType="boardCommentDto">
        UPDATE board_comment SET bcRef = #{bcRef} WHERE bcId = #{bcId}
    </update>

    <!-- 게시물의 댓글 수 조회 -->
    <select id="getBoardComCount" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM board_comment WHERE boardId = #{boardId}
    </select>

    <!-- 모든 댓글 조회 -->
    <select id="getAllBoardCom" parameterType="hashmap" resultType="boardCommentDto">
        SELECT b.bcId, b.boardId, b.bcContents, b.memId, b.bcRegtime, b.bcUpdatedtime,
        b.bcRef, b.bcReLevel, m.memNickname
        FROM board_comment b
        JOIN member m ON b.memId = m.memId
        WHERE b.boardId = #{boardId} AND b.bcReLevel = 0
        ORDER BY b.bcRef DESC, b.bcId ASC
    </select>

    <!-- 대댓글 조회 -->
    <select id="getBoardReCom" parameterType="int" resultType="boardCommentDto">
        SELECT *
        FROM board_comment
        WHERE bcRef = #{bcRef}
        AND bcReLevel > 0
        ORDER BY bcRef ASC, bcReLevel ASC, bcId ASC
    </select>

    <!-- 게시물 삭제 -->
    <delete id="deleteBoard" parameterType="int">
    DELETE FROM board
    WHERE boardId = #{boardId}
</delete>

    <!-- 게시물에 첨부된 파일 삭제 -->
    <delete id="deleteBoardImage" parameterType="int">
        DELETE FROM file WHERE boardId = #{boardId}
    </delete>

    <!-- 게시물의 댓글 삭제 -->
    <delete id="deleteBoardCom" parameterType="int">
        DELETE FROM board_comment WHERE boardId = #{boardId}
    </delete>

    <!-- 대댓글 삭제 -->
    <delete id="deleteBoardReCom" parameterType="int">
        DELETE FROM board_comment WHERE bcRef = #{bcRef}
    </delete>

    <!-- 게시물 수정 -->
    <update id="updateBoard" parameterType="BoardDTO">
        UPDATE board SET boardTitle = #{boardTitle}, boardContents = #{boardContents} WHERE boardId = #{boardId}
    </update>

    <!-- 조회수 증가 -->
    <update id="increaseViewCount" parameterType="int">
        UPDATE board SET boardViewCount = boardViewCount + 1 WHERE boardId = #{boardId}
    </update>
    
    <insert id="insertBoard" parameterType="boarddto">
		insert into
		board(boardTitle, boardContents, boardViewCount, boardRegtime,
		memId,
		boardType)
		values(#{boardTitle}, #{boardContents}, 0, now(), #{memId},
		'review')
	</insert>
	
	<insert id="insertFile" parameterType="filedto">
		insert into file (fileIdx,
		filePath, fileName, fileType, boardId)
		values (#{fileIdx}, #{filePath},
		#{fileName}, #{fileType}, #{boardId})
	</insert>



	<select id="getGeneratedBoardId" resultType="int">
		select
		last_insert_id()
	</select>

	<select id="getFilesByBoardId" parameterType="int"
		resultType="dto.FileDTO">
		select * from file where boardId = #{boardId};
	</select>

<!-- 좋아요 기능 추가 -->
<insert id="insertLike" parameterType="dto.BoardLikeDTO">
    INSERT INTO board_like (memId, boardId)
    VALUES (#{memId}, #{boardId})
</insert>

<delete id="deleteLike" parameterType="dto.BoardLikeDTO">
    DELETE FROM board_like
    WHERE memId = #{memId} AND boardId = #{boardId}
</delete>

<select id="hasLiked" parameterType="dto.BoardLikeDTO" resultType="boolean">
    SELECT COUNT(*) > 0
    FROM board_like
    WHERE memId = #{memId} AND boardId = #{boardId}
</select>

<select id="countLikes" parameterType="int" resultType="int">
    SELECT COUNT(*)
    FROM board_like
    WHERE boardId = #{boardId}
</select>

</mapper>
